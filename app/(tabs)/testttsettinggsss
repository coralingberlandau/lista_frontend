
{/* אולי להוסיף התראות ליומן????? */}

      {/* <TouchableOpacity style={styles.settingOption} onPress={() =>  */}
      {/* לפתוח מסך עם אפשרויות */}
      {/* }> */}
      {/* <Text style={styles.settingText}>Notification Settings</Text> */}
      {/* </TouchableOpacity> */}

      {/* אולי להוסיף התראות ליומן????? */}



      




         {/* wwwhhhaaaaaattttttt */}
      {/* <Text style={styles.sectionTitle}>General Settings</Text>
      <TouchableOpacity style={styles.settingOption} onPress={() => { }}>
        <Text style={styles.settingText}>Notifications</Text>
      </TouchableOpacity>
      <TouchableOpacity style={styles.settingOption} onPress={() => { }}>
        <Text style={styles.settingText}>Theme</Text>
      </TouchableOpacity> */}

      {/* wwwhhhaaaaaattttttt */}






     {/* <TouchableOpacity style={styles.settingOption} onPress={handleRateApp}>
        <Text style={styles.settingText}>Rate Us</Text>
      </TouchableOpacity> */}










// import React, { useState } from 'react';
// import { View, Text, StyleSheet, TouchableOpacity, Linking, Button, Modal } from 'react-native';
// import AsyncStorage from '@react-native-async-storage/async-storage';
// import Toast from 'react-native-toast-message';
// import { useNavigation } from '@react-navigation/native';  // יש לוודא שאתה משתמש בזה
// import { StackNavigationProp } from '@react-navigation/stack';
// import { RootStackParamList } from '../type';  // קובץ שבו אתה מגדיר את המסכים
// import { AntDesign, Ionicons } from '@expo/vector-icons';

// import { Image } from 'react-native';
// import axios from 'axios';

// // טיפוס עבור פרופס של Settings
// type SettingsProps = {
//   setIsLoggedIn: React.Dispatch<React.SetStateAction<boolean | null>>;
// };

// // טיפוס עבור הניווט למסך EditProfile
// type EditProfileScreenNavigationProp = StackNavigationProp<RootStackParamList, 'EditProfile'>;

// const Settings: React.FC<SettingsProps> = ({ setIsLoggedIn }) => {
//   const appName = "Lista Application";
//   const version = "1.0.0";
//   const supportContact = "listaassistance@gmail.com";





//   // שימוש ב-useNavigation עם טיפוס ספציפי
//   const navigation = useNavigation<EditProfileScreenNavigationProp>();

//   // פונקציה לדירוג האפליקציה
//   const handleRateApp = () => {
//     Linking.openURL('market://details?id=com.lista');  // חנות גוגל
//   };

//   // ניווט לעמוד עריכת פרופיל
//   const navigateToEditProfile = () => {
//     navigation.navigate('EditProfile');  // ניווט למסך EditProfile
//   };

//   // פונקציה לפתיחת מייל
//   const handleEmailPress = () => {
//     Linking.openURL(`mailto:${supportContact.split(': ')[1]}`);
//   };

//   // פונקציה להתנתקות
//   const handleLogout = async () => {
//     try {
//       await AsyncStorage.removeItem('userToken');
//       setIsLoggedIn(false);  // מנתק את המשתמש על ידי עדכון הסטטוס ל-false
//     } catch (error) {
//       console.error('Error logging out:', error);
//       Toast.show({
//         type: 'error',
//         text1: 'Error logging out',
//         text2: 'Please try again later',
//       });
//     }
//   };

//   // colorrrrr************* -- colooooooorrrrrrrrrrrrrrr ********************


//   const [backgroundImage, setBackgroundImage] = useState<string | null>(null); // אחסון התמונה שנבחרה
//   const [isBackgroundPickerVisible, setIsBackgroundPickerVisible] = useState(false); // מצב של תצוגת הבחירה
//   const [selectedImage, setSelectedImage] = useState<number | null>(null); // אחסון התמונה שנבחרה
//   const [isModalVisible, setIsModalVisible] = useState(false);


//   const storedUserId = AsyncStorage.getItem('userId');

//   const backgroundImages = [
//     { id: 1, url: require('../../assets/background/back.jpeg') },
//     { id: 2, url: require('../../assets/background/back1.jpeg') },
//     { id: 3, url: require('../../assets/background/back2.jpg') },
//     { id: 4, url: require('../../assets/background/back3.webp') },
//     { id: 5, url: require('../../assets/background/back4.jpg') },
//     { id: 6, url: require('../../assets/background/back5.jpeg') },
//     { id: 7, url: require('../../assets/background/back6.webp') },
//     { id: 8, url: require('../../assets/background/back7.jpeg') },
//     { id: 9, url: require('../../assets/background/back8.jpeg') },
//     { id: 10, url: require('../../assets/background/back9.jpeg') },
//     { id: 11, url: require('../../assets/background/back10.jpeg') },
//     { id: 12, url: require('../../assets/background/back11.jpeg') },
//     { id: 13, url: require('../../assets/background/back12.jpeg') },
//     { id: 14, url: require('../../assets/background/back13.jpeg') },
//     { id: 15, url: require('../../assets/background/back14.jpeg') },
//     { id: 17, url: require('../../assets/background/back16.jpeg') },
//     { id: 18, url: require('../../assets/background/back17.jpg') },
//     { id: 19, url: require('../../assets/background/back18.jpg') },
//     { id: 20, url: require('../../assets/background/back19.jpeg') },
//     { id: 21, url: require('../../assets/background/back20.jpeg') },
//   ];

//   // const BackgroundPicker = ({ userId }: { userId: number }) => {
//   //   const [selectedImage, setSelectedImage] = useState<number | null>(null);

//   // (

//   // <View style={styles.backgroundPickerContainer}>
//   //   {backgroundImages.map((image) => (
//   //     <TouchableOpacity
//   //       key={image.id}
//   //       onPress={() => handleBackgroundChange(image.id, userId)}
//   //       style={styles.backgroundImageOption}
//   //     >
//   //       <Image source={image.url} style={styles.backgroundImage} />
//   //     </TouchableOpacity>
//   //   ))}
//   // </View>
//   // );

//   //     const handleBackgroundChange = async (imageId: number, userId: number) => {
//   //       setSelectedImage(imageId);

//   //     // שמירת התמונה ב-AsyncStorage
//   //     await AsyncStorage.setItem('backgroundImageId', imageId.toString());

//   //     // שליחת המידע לשרת לעדכון בדאטה בייס עם user_id
//   //   try {
//   //       await axios.post('http://127.0.0.1:8000/customizations/', { user_id: userId, background_image_id: imageId });
//   //     } catch (error) {
//   //       console.error("Error updating background image:", error);
//   //     }
//   //   };
//   // }



//   // this is goooddd

//   // const BackgroundPicker = ({ userId }: { userId: number }) => {
//   //   const [selectedImage, setSelectedImage] = useState<number | null>(null);

//   //   const handleBackgroundChange = async (imageId: number, userId: number) => {
//   //     setSelectedImage(imageId);

//   //     // שמירת התמונה ב-AsyncStorage
//   //     await AsyncStorage.setItem('backgroundImageId', imageId.toString());

//   //     // שליחת המידע לשרת לעדכון בדאטה בייס עם user_id
//   //     try {
//   //       await axios.post('http://127.0.0.1:8000/customizations/', { user_id: userId, background_image_id: imageId });
//   //     } catch (error) {
//   //       console.error("Error updating background image:", error);
//   //     }
//   //   };

//   // }





//   // deleeeteeeeee

//   //  const loadColors = async () => {
//   //   const savedBackgroundColor = await AsyncStorage.getItem('backgroundColor');
//   //   const savedTextColor = await AsyncStorage.getItem('textColor');

//   //   if (savedBackgroundColor) {
//   //     setBackgroundColor(savedBackgroundColor);
//   //   }
//   //   if (savedTextColor) {
//   //     setTextColor(savedTextColor);
//   //   }
//   // };


//   //  const handleTextColorChange = async (color: HsvColor | string) => {
//   //   const colorHex = typeof color === 'string' ? color : hsvToHex(color.h, color.s, color.v);
//   //   setTextColor(colorHex);
//   //   await AsyncStorage.setItem('textColor', colorHex); // שמירה באמצעות AsyncStorage
//   //   setIsTextColorPickerVisible(false);
//   // };

//   // const handleBackgroundColorChange = async (color: HsvColor | string) => {
//   //   const colorHex = typeof color === 'string' ? color : hsvToHex(color.h, color.s, color.v);
//   //   setBackgroundColor(colorHex);
//   //   await AsyncStorage.setItem('backgroundColor', colorHex); // שמירה באמצעות AsyncStorage
//   //   setIsBackgroundPickerVisible(false);
//   // };

//   // colorrrrr************* -- colooooooorrrrrrrrrrrrrrr ********************




//   const BackgroundPicker = ({ userId }: { userId: number }) => {
//     const [selectedImage, setSelectedImage] = useState<number | null>(null);
//     const [isModalVisible, setIsModalVisible] = useState(false);

//     const handleBackgroundChange = async (imageId: number) => {
//       setSelectedImage(imageId);

//       // שמירת התמונה ב-AsyncStorage
//       await AsyncStorage.setItem('backgroundImageId', imageId.toString());

//       // שליחת המידע לשרת לעדכון בדאטה בייס עם user_id
//       try {
//         await axios.post('http://127.0.0.1:8000/customizations/', { user_id: userId, background_image_id: imageId });
//       } catch (error) {
//         console.error("Error updating background image:", error);
//       }

//       // סגירת המודל
//       setIsModalVisible(false);
//     };
//   }

//   return (
//     <View style={styles.container}>

//       <Text style={styles.title}>{appName}</Text>
//       <Text style={styles.version}>Version: {version}</Text>


//       <TouchableOpacity onPress={handleLogout} style={styles.logoutButton}>
//         <AntDesign name="logout" size={20} color="red" />
//         <Text style={styles.iconLabel}>Logout</Text>
//       </TouchableOpacity>






//       {/* wwwhhhaaaaaattttttt */}
//       {/* <Text style={styles.sectionTitle}>General Settings</Text>
//       <TouchableOpacity style={styles.settingOption} onPress={() => { }}>
//         <Text style={styles.settingText}>Notifications</Text>
//       </TouchableOpacity>
//       <TouchableOpacity style={styles.settingOption} onPress={() => { }}>
//         <Text style={styles.settingText}>Theme</Text>
//       </TouchableOpacity> */}

//       {/* wwwhhhaaaaaattttttt */}





//       <Text style={styles.sectionTitle}>Support</Text>
//       <Text style={styles.supportInfo}>For assistance, please contact Lista support:</Text>
//       <TouchableOpacity onPress={handleEmailPress}>
//         <Text style={styles.supportContact}>{supportContact}</Text>
//       </TouchableOpacity>



//       <Text style={styles.notification}>If you need any assistance, feel free to reach out!</Text>
//       <Text style={styles.inspirationText}>Keep achieving great things with Lista!</Text>



//       <TouchableOpacity onPress={navigateToEditProfile} style={styles.editProfileButton}>
//         <Ionicons name="pencil-outline" size={30} color="green" />
//         <Text style={styles.iconLabel}>Edit Profile</Text>
//       </TouchableOpacity>






//       <TouchableOpacity style={styles.settingOption} onPress={handleRateApp}>
//         <Text style={styles.settingText}>Rate Us</Text>
//       </TouchableOpacity>



//       {/* 
//       <TouchableOpacity onPress={() => setIsBackgroundPickerVisible(true)}>
//         <Ionicons name="color-palette-outline" size={50} color="black" />
//         <Text style={styles.iconLabel}>Background</Text>
//       </TouchableOpacity> */}




//       {/* כפתור לפתיחת המודל */}
//       <TouchableOpacity onPress={() => setIsModalVisible(true)} style={styles.iconButton}>
//         <Ionicons name="color-palette-outline" size={50} color="black" />
//         <Text style={styles.iconLabel}>Background</Text>
//       </TouchableOpacity>

//       {/* המודל */}
//      {/* המודל */}
//      <Modal
//         animationType="slide"
//         transparent={true}
//         visible={isModalVisible}
//         onRequestClose={() => setIsModalVisible(false)}
//       >
//         <View style={styles.modalContainer}>
//           <View style={styles.modalContent}>

//             {/* אם נתון ה-userId לא נטען עדיין, מציגים הודעת טעינה */}
//             {storedUserId ? (
//               <BackgroundPicker userId={storedUserId} />
//             ) : (
//               <Text>Loading user data...</Text>
//             )}

//             {/* כפתור לסגירת המודל */}
//             <TouchableOpacity onPress={() => setIsModalVisible(false)} style={styles.closeButton}>
//               <Text style={styles.closeButtonText}>סגור</Text>
//             </TouchableOpacity>
//           </View>
//         </View>
//       </Modal>





//       {/* כפתור לפתיחת המודל */}
//       {/* <TouchableOpacity onPress={() => setIsModalVisible(true)} style={styles.iconButton}>
//         <Ionicons name="color-palette-outline" size={50} color="black" />
//         <Text style={styles.iconLabel}>Background</Text>
//       </TouchableOpacity>

//       {/* המודל */}
//       {/* <Modal
//         animationType="slide"
//         transparent={true}
//         visible={isModalVisible}
//         onRequestClose={() => setIsModalVisible(false)}
//       >
//         <View style={styles.modalContainer}>
//           <View style={styles.modalContent}>
//             {backgroundImages.map((image) => (
//               <TouchableOpacity
//                 key={image.id}
//                 onPress={() => handleBackgroundChange(image.id)}
//                 style={styles.imageOption}
//               >
//                 <Image source={image.url} style={styles.image} />
//                 {selectedImage === image.id && (
//                   <Text style={styles.checkmark}>✔️</Text>
//                 )}
//               </TouchableOpacity>
//             ))} */}

//       {/* כפתור לסגירת המודל */}
//       {/* <TouchableOpacity onPress={() => setIsModalVisible(false)} style={styles.closeButton}>
//               <Text style={styles.closeButtonText}>סגור</Text>
//             </TouchableOpacity>
//           </View>
//         </View>
//       </Modal> 
//  */}





//       {/* <View style={styles.backgroundPickerContainer}>
//       {backgroundImages.map((image) => (
//         <TouchableOpacity
//           key={image.id}
//           onPress={() => handleBackgroundChange(image.id, userId)}
//           style={styles.backgroundImageOption}
//         >
//           <Image source={image.url} style={styles.backgroundImage} />
//         </TouchableOpacity>
//       ))}
//     </View> */}






//       {/* אולי להוסיף התראות ליומן????? */}

//       {/* <TouchableOpacity style={styles.settingOption} onPress={() =>  */}
//       {/* לפתוח מסך עם אפשרויות */}
//       {/* }> */}
//       {/* <Text style={styles.settingText}>Notification Settings</Text> */}
//       {/* </TouchableOpacity> */}

//       {/* אולי להוסיף התראות ליומן????? */}






//       <View style={styles.footerContainer}>
//         <Text style={styles.footerText}>
//           © All rights reserved to Coral Landau, Founder of Lista.
//         </Text>
//       </View>


//     </View>
//   );
// };

// const styles = StyleSheet.create({
//   container: {
//     flex: 1,
//     justifyContent: 'flex-start',
//     alignItems: 'flex-start',
//     padding: 20,
//     backgroundColor: '#f5f5f5',
//   },
//   title: {
//     fontSize: 30,
//     fontWeight: 'bold',
//     marginBottom: 10,
//   },
//   version: {
//     fontSize: 18,
//     marginBottom: 20,
//   },
//   sectionTitle: {
//     fontSize: 22,
//     fontWeight: 'bold',
//     marginVertical: 10,
//   },
//   settingOption: {
//     padding: 10,
//     borderBottomWidth: 1,
//     borderBottomColor: '#ddd',
//     width: '100%',
//   },
//   settingText: {
//     fontSize: 18,
//   },
//   supportInfo: {
//     fontSize: 16,
//     marginVertical: 10,
//   },
//   supportContact: {
//     fontSize: 18,
//     color: 'blue',
//     textDecorationLine: 'underline',
//     marginVertical: 10,
//   },
//   notification: {
//     fontSize: 16,
//     // color: 'green',
//     // color: 'blue',

//     marginVertical: 15,
//   },
//   footerText: {
//     fontSize: 14,
//     color: '#777',
//     textAlign: 'center',
//     marginVertical: 20,
//   },
//   footerContainer: {
//     alignItems: 'center',  // ממקם את הטקסט במרכז לרוחב
//     paddingVertical: 20,
//   },
//   inspirationText: {
//     fontSize: 15,
//     color: '#555',
//     textAlign: 'center',
//     fontStyle: 'italic',
//     marginVertical: 15,
//   },
//   logoutButton: {
//     position: 'absolute', // למיקום בעמוד
//     top: 20, // למקם למעלה (בקרבת שם המשתמש)
//     right: 20, // למקם בצד ימין של המסך
//     backgroundColor: '#f5f5f5',  // השתנה לצבע הרקע של הדף
//     padding: 10, // להוסיף מרווחים
//     borderRadius: 50, // עיגול מלא
//     justifyContent: 'center',
//     alignItems: 'center',
//   },
//   iconLabel: {
//     color: 'black',
//     marginTop: 5,

//   },
//   editProfileButton: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     backgroundColor: '#f2f2f2', // צבע רקע אפור בהיר
//     padding: 10,
//     borderRadius: 5,
//     marginVertical: 10,
//     borderColor: '#ccc',
//     borderWidth: 1,
//   },



//   backgroundPickerContainer: {
//     flexDirection: 'row',
//     flexWrap: 'wrap',
//     marginTop: 20,
//   },
//   backgroundImageOption: {
//     margin: 5,
//     width: 80,
//     height: 80,
//     borderRadius: 10,
//     overflow: 'hidden',
//   },
//   backgroundImage: {
//     width: '100%',
//     height: '100%',
//     borderRadius: 10,
//   },



//   iconButton: {
//     alignItems: 'center',
//   },
//   iconLabel: {
//     fontSize: 14,
//     color: 'black',
//     marginTop: 5,
//   },
//   modalContainer: {
//     flex: 1,
//     backgroundColor: 'rgba(0,0,0,0.5)',
//     justifyContent: 'center',
//     alignItems: 'center',
//   },
//   modalContent: {
//     width: '90%',
//     backgroundColor: '#fff',
//     borderRadius: 15,
//     padding: 20,
//     alignItems: 'center',
//   },
//   imageOption: {
//     margin: 10,
//     position: 'relative',
//   },
//   image: {
//     width: 100,
//     height: 100,
//     borderRadius: 10,
//   },
//   checkmark: {
//     position: 'absolute',
//     top: 5,
//     right: 5,
//     fontSize: 24,
//     color: 'green',
//   },
//   closeButton: {
//     marginTop: 20,
//     backgroundColor: '#e74c3c',
//     padding: 10,
//     borderRadius: 10,
//   },
//   closeButtonText: {
//     color: '#fff',
//     fontSize: 16,
//   },


// });

// export default Settings;
